// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	security "github.com/arman-yekkehkhani/task-tide/internal/service/security"
	mock "github.com/stretchr/testify/mock"
)

// MockHashService is an autogenerated mock type for the HashService type
type MockHashService struct {
	mock.Mock
}

type MockHashService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashService) EXPECT() *MockHashService_Expecter {
	return &MockHashService_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields: algorithm, raw
func (_m *MockHashService) Hash(algorithm security.HashAlgorithm, raw string) (string, error) {
	ret := _m.Called(algorithm, raw)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(security.HashAlgorithm, string) (string, error)); ok {
		return rf(algorithm, raw)
	}
	if rf, ok := ret.Get(0).(func(security.HashAlgorithm, string) string); ok {
		r0 = rf(algorithm, raw)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(security.HashAlgorithm, string) error); ok {
		r1 = rf(algorithm, raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHashService_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockHashService_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - algorithm security.HashAlgorithm
//   - raw string
func (_e *MockHashService_Expecter) Hash(algorithm interface{}, raw interface{}) *MockHashService_Hash_Call {
	return &MockHashService_Hash_Call{Call: _e.mock.On("Hash", algorithm, raw)}
}

func (_c *MockHashService_Hash_Call) Run(run func(algorithm security.HashAlgorithm, raw string)) *MockHashService_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(security.HashAlgorithm), args[1].(string))
	})
	return _c
}

func (_c *MockHashService_Hash_Call) Return(_a0 string, _a1 error) *MockHashService_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHashService_Hash_Call) RunAndReturn(run func(security.HashAlgorithm, string) (string, error)) *MockHashService_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHashService creates a new instance of MockHashService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashService {
	mock := &MockHashService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
