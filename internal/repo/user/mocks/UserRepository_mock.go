// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	base "github.com/arman-yekkehkhani/task-tide/internal/model/base"
	mock "github.com/stretchr/testify/mock"

	user "github.com/arman-yekkehkhani/task-tide/internal/model/user"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: t
func (_m *MockUserRepository) Create(t *user.User) (*user.User, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (*user.User, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(*user.User) *user.User); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - t *user.User
func (_e *MockUserRepository_Expecter) Create(t interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", t)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(t *user.User)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(_a0 *user.User, _a1 error) *MockUserRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(*user.User) (*user.User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with no fields
func (_m *MockUserRepository) DeleteById() {
	_m.Called()
}

// MockUserRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockUserRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) DeleteById() *MockUserRepository_DeleteById_Call {
	return &MockUserRepository_DeleteById_Call{Call: _e.mock.On("DeleteById")}
}

func (_c *MockUserRepository_DeleteById_Call) Run(run func()) *MockUserRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_DeleteById_Call) Return() *MockUserRepository_DeleteById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserRepository_DeleteById_Call) RunAndReturn(run func()) *MockUserRepository_DeleteById_Call {
	_c.Run(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *MockUserRepository) GetById(id base.ID) (*user.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(base.ID) (*user.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(base.ID) *user.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(base.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockUserRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id base.ID
func (_e *MockUserRepository_Expecter) GetById(id interface{}) *MockUserRepository_GetById_Call {
	return &MockUserRepository_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *MockUserRepository_GetById_Call) Run(run func(id base.ID)) *MockUserRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.ID))
	})
	return _c
}

func (_c *MockUserRepository_GetById_Call) Return(_a0 *user.User, _a1 error) *MockUserRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetById_Call) RunAndReturn(run func(base.ID) (*user.User, error)) *MockUserRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: username
func (_m *MockUserRepository) GetByUsername(username string) (*user.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUserRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockUserRepository_Expecter) GetByUsername(username interface{}) *MockUserRepository_GetByUsername_Call {
	return &MockUserRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *MockUserRepository_GetByUsername_Call) Run(run func(username string)) *MockUserRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetByUsername_Call) Return(_a0 *user.User, _a1 error) *MockUserRepository_GetByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetByUsername_Call) RunAndReturn(run func(string) (*user.User, error)) *MockUserRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: t
func (_m *MockUserRepository) Save(t *user.User) (*user.User, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User) (*user.User, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(*user.User) *user.User); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - t *user.User
func (_e *MockUserRepository_Expecter) Save(t interface{}) *MockUserRepository_Save_Call {
	return &MockUserRepository_Save_Call{Call: _e.mock.On("Save", t)}
}

func (_c *MockUserRepository_Save_Call) Run(run func(t *user.User)) *MockUserRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User))
	})
	return _c
}

func (_c *MockUserRepository_Save_Call) Return(_a0 *user.User, _a1 error) *MockUserRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Save_Call) RunAndReturn(run func(*user.User) (*user.User, error)) *MockUserRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
