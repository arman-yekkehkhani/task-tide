// Code generated by mockery v2.50.2. DO NOT EDIT.

package mocks

import (
	base "github.com/arman-yekkehkhani/task-tide/internal/model/base"
	chore "github.com/arman-yekkehkhani/task-tide/internal/model/chore"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockRepository) Create(_a0 *chore.Chore) (base.ID, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 base.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(*chore.Chore) (base.ID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*chore.Chore) base.ID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(base.ID)
	}

	if rf, ok := ret.Get(1).(func(*chore.Chore) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *chore.Chore
func (_e *MockRepository_Expecter) Create(_a0 interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockRepository_Create_Call) Run(run func(_a0 *chore.Chore)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chore.Chore))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 base.ID, _a1 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(*chore.Chore) (base.ID, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: id
func (_m *MockRepository) DeleteById(id base.ID) {
	_m.Called(id)
}

// MockRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockRepository_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id base.ID
func (_e *MockRepository_Expecter) DeleteById(id interface{}) *MockRepository_DeleteById_Call {
	return &MockRepository_DeleteById_Call{Call: _e.mock.On("DeleteById", id)}
}

func (_c *MockRepository_DeleteById_Call) Run(run func(id base.ID)) *MockRepository_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.ID))
	})
	return _c
}

func (_c *MockRepository_DeleteById_Call) Return() *MockRepository_DeleteById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRepository_DeleteById_Call) RunAndReturn(run func(base.ID)) *MockRepository_DeleteById_Call {
	_c.Run(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockRepository) GetByID(id base.ID) *chore.Chore {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *chore.Chore
	if rf, ok := ret.Get(0).(func(base.ID) *chore.Chore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chore.Chore)
		}
	}

	return r0
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id base.ID
func (_e *MockRepository_Expecter) GetByID(id interface{}) *MockRepository_GetByID_Call {
	return &MockRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockRepository_GetByID_Call) Run(run func(id base.ID)) *MockRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(base.ID))
	})
	return _c
}

func (_c *MockRepository_GetByID_Call) Return(_a0 *chore.Chore) *MockRepository_GetByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_GetByID_Call) RunAndReturn(run func(base.ID) *chore.Chore) *MockRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: c
func (_m *MockRepository) Save(c *chore.Chore) (*chore.Chore, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *chore.Chore
	var r1 error
	if rf, ok := ret.Get(0).(func(*chore.Chore) (*chore.Chore, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*chore.Chore) *chore.Chore); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chore.Chore)
		}
	}

	if rf, ok := ret.Get(1).(func(*chore.Chore) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - c *chore.Chore
func (_e *MockRepository_Expecter) Save(c interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", c)}
}

func (_c *MockRepository_Save_Call) Run(run func(c *chore.Chore)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chore.Chore))
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(_a0 *chore.Chore, _a1 error) *MockRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(*chore.Chore) (*chore.Chore, error)) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
